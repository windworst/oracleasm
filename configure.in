AC_INIT(Makefile)

PACKAGE=oracleasm

AC_SUBST(PACKAGE)

#
# Versioning ideas, copied from GTK+
#
# Making releases:
#   MICRO_VERSION += 1;
#   INTERFACE_AGE += 1;
#   BINARY_AGE += 1;
# If any functions have been added, set INTERFACE_AGE to 0.
# If backwards compatibility has been broken, set BINARY_AGE and
# INTEFACE_AGE to 0.
#
MAJOR_VERSION=2
MINOR_VERSION=0
MICRO_VERSION=6
INTERFACE_AGE=6
BINARY_AGE=6
VERSION="${MAJOR_VERSION}.${MINOR_VERSION}.${MICRO_VERSION}"
AC_SUBST(MAJOR_VERSION)
AC_SUBST(MINOR_VERSION)
AC_SUBST(MICRO_VERSION)
AC_SUBST(INTERFACE_AGE)
AC_SUBST(BINARY_AGE)
AC_SUBST(VERSION)

DIST_VERSION=$MAJOR_VERSION.$MINOR_VERSION.$MICRO_VERSION
AC_SUBST(DIST_VERSION)

AC_CANONICAL_HOST

AC_PROG_CC
AC_PROG_CPP

AC_PROG_INSTALL
AC_PROG_LN_S
AC_PROG_RANLIB

AC_PATH_PROG(AR, ar)


AC_HEADER_STDC
AC_C_CONST

AC_CHECK_SIZEOF(unsigned long)

MB_VENDOR()
MB_VENDOR_KERNEL(vendordir)

if test "x$GCC" != "xyes"; then
  AC_MSG_ERROR(GCC is required)
fi

AC_MSG_CHECKING(for directory with kernel build tree)
AC_ARG_WITH(kernel, [  --with-kernel=dir       Path to the kernel build tree [/usr/src/linux]], kerneldir="$withval", [
  if test -n "$vendordir"; then
    kerneldir="$vendordir"
  elif test -d "/lib/modules/`uname -r`/build" -o -L "/lib/modules/`uname -r`/build"; then
    kerneldir="/lib/modules/`uname -r`/build"
  else
    kerneldir="/usr/src/linux"
  fi
])

if test ! -f "${kerneldir}/include/linux/autoconf.h"; then
  AC_MSG_RESULT([not found])
  KERNELDIR=
else
  AC_MSG_RESULT($kerneldir)
  KERNELDIR="$kerneldir"
  AC_SUBST(KERNELDIR)
fi

KBUILDINC="$KERNELDIR/include"
OCFS2_CHECK_KVER($KBUILDINC, kbuildversion, , , :)
OCFS2_CHECK_KARCH($KBUILDINC, kbuildarch, , , :)

kernelsourcedir=
AC_MSG_CHECKING(for directory with kernel sources)
AC_ARG_WITH(kernel-source, [  --with-kernel-source=dir Path to the kernel source [[autodetect]]], kernelsourcedir="$withval", [
  kernelroot=`echo $kerneldir | sed -e 's/\/$//' -e 's/build$//'`
  ksrc="$kernelroot/source"
  knoobjsrc=`echo $kerneldir | sed 's/-obj.*//'`
  if test -f "$kerneldir/include/linux/fs.h"; then
    kernelsourcedir="$kerneldir"
  elif test -f "$knoobjsrc/include/linux/fs.h"; then
    kernelsourcedir="$knoobjsrc"
  elif test -d "$ksrc" -o -L "$ksrc"; then
    kernelsourcedir="$ksrc"
  fi
])

if test -n "$kernelsourcedir"; then
  AC_MSG_RESULT($kernelsourcedir)
else
  AC_MSG_RESULT([not found])
fi

KERNELSRC="$kernelsourcedir"
KERNELBUILD="$kerneldir"
KERNELINC="$KERNELSRC/include"

if test ! -f "$KERNELBUILD/include/linux/autoconf.h"; then
  AC_MSG_WARN(No configured kernel include tree found)
fi

if test "x$kernelsourcedir" = "x"; then
  ksourceversion=none
else
  OCFS2_CHECK_KVER("$KERNELBUILD/include", ksourceversion, "source")
fi

if test "$kbuildversion" = "$ksourceversion"; then
  vermatch=yes
elif test "x$KERNELSRC" != "x"; then
  saved_CPPFLAGS="$CPPFLAGS"
  CPPFLAGS="-I$KERNELINC $CPPFLAGS"

  AC_EGREP_CPP(kernel_is_SuSE,
[#include <linux/autoconf.h>
#ifdef CONFIG_SUSE_KERNEL
  kernel_is_SuSE
#endif
}], susekernel=yes, susekernel=no)

  CPPFLAGS="$saved_CPPFLAGS"

  vermatch=no

  if test "$susekernel" = "yes"; then
    kbuildversion=`echo $kversion | sed 's/^\([[0-9]]*\.[[0-9]]*\.[[0-9]]*-[[0-9]]*\.[[0-9]]*\).*/\1/'`
    ksourceversion=`echo $ksourceversion | sed 's/^\([[0-9]]*\.[[0-9]]*\.[[0-9]]*-[[0-9]]*\.[[0-9]]*\).*/\1/'`

    if test "$kbuildversion" = "$ksourceversion"; then
      vermatch=yes
    fi
  fi

  if test "$vermatch" = "no"; then
    AC_MSG_WARN([Kernel tree versions do not match.
Perhaps you need to use the --with-kernel-source option?])
  fi
fi

if test "x$kbuildversion" = "x"; then
  kbuildversion=none
elif test "x$vermatch" != "xyes"; then
  kbuildversion=none
fi
kversion="$kbuildversion"

BUILD_DRIVER=
case "$kversion" in
  2.6.*)
    BUILD_DRIVER=yes
    ;;
  none)
    AC_MSG_RESULT([Could not determine kernel version, disabling driver build])
    ;;
  *)
    AC_MSG_RESULT([This module only supports kernel version 2.6.x, disabling driver build])
  ;;
esac
AC_SUBST(BUILD_DRIVER)

KERNELVER=$kversion
AC_SUBST(KERNELVER)
KERNELARCH=$kbuildarch
AC_SUBST(KERNELARCH)

KAPI_COMPAT_CFLAGS=
BACKING_DEV_CAPABILITIES=
GET_SB_HAS_VFSMOUNT=
if test x"$BUILD_DRIVER" = "xyes"; then

  AC_MSG_CHECKING(for kernel include directory)

  if test x"$vendordir" = x"$kerneldir" ; then
      kernelincludes="`vendor/${mb_vendor}/kernel.guess include $kversion`"
  else
      kernelincludes="$KBUILDINC"
      if test "x$KBUILDINC" != "x$KERNELINC"; then
          kernelincludes="$kernelincludes $KERNELINC"
      fi
  fi

  AC_MSG_RESULT([$kernelincludes])

  KAPI_COMPAT_HEADERS=
  TRANS_COMPAT_HEADERS=

  OCFS2_CHECK_KERNEL_INCLUDES([capabilities mask in backing_dev_info],
    linux/backing-dev.h, $kernelincludes,
    BACKING_DEV_CAPABILITIES=yes, , [\<BDI_CAP_NO_WRITEBACK\>])

  OCFS2_CHECK_KERNEL_INCLUDES([mount_bdev / mount_pseudo in fs.h],
    linux/fs.h, $kernelincludes,
    MOUNT_BDEV=yes, , [\<mount_bdev\>])

  OCFS2_CHECK_KERNEL_INCLUDES([dentry ops in mount_pseudo in fs.h],
    linux/fs.h, $kernelincludes,
    PSEUDO_DOPS=yes, , [const struct dentry_operations \*dops])

  OCFS2_CHECK_KERNEL_INCLUDES([vfsmount in ->get_sb() helpers],
    linux/fs.h, $kernelincludes, GET_SB_HAS_VFSMOUNT=yes, ,
    [^extern int get_sb_pseudo])

  mutex_compat_header=
  OCFS2_CHECK_KERNEL_INCLUDES([for mutex API], linux/fs.h,
    $kernelincludes, , mutex_compat_header="i_mutex.h", [i_mutex])
  KAPI_COMPAT_HEADERS="$KAPI_COMPAT_HEADERS $mutex_compat_header"
  TRANS_COMPAT_HEADERS="$TRANS_COMPAT_HEADERS $mutex_compat_header"

  private_compat_header=
  OCFS2_CHECK_KERNEL_INCLUDES([for i_private], linux/fs.h,
    $kernelincludes, , private_compat_header="i_private.h", [i_private])
  KAPI_COMPAT_HEADERS="$KAPI_COMPAT_HEADERS $private_compat_header"
  TRANS_COMPAT_HEADERS="$TRANS_COMPAT_HEADERS $private_compat_header"

  clear_inode_compat_header=
  OCFS2_CHECK_KERNEL_INCLUDES([for clear_inode], linux/fs.h,
    $kernelincludes, clear_compat_header="clear_inode.h", ,
    [void (\*clear_inode) (struct inode \*)])
  KAPI_COMPAT_HEADERS="$KAPI_COMPAT_HEADERS $clear_compat_header"
  TRANS_COMPAT_HEADERS="$TRANS_COMPAT_HEADERS $clear_compat_header"

  blksize_compat_header=
  OCFS2_CHECK_KERNEL_INCLUDES([for i_blksize], linux/fs.h,
    $kernelincludes, blksize_compat_header="i_blksize.h", , [i_blksize])
  KAPI_COMPAT_HEADERS="$KAPI_COMPAT_HEADERS $blksize_compat_header"
  TRANS_COMPAT_HEADERS="$TRANS_COMPAT_HEADERS $blksize_compat_header"

  bio_end_io_compat_header=
  OCFS2_CHECK_KERNEL_INCLUDES([for three argument bio_end_io], linux/bio.h,
    $kernelincludes, bio_end_io_compat_header="bio_end_io.h", ,
    [void bio_endio(struct bio \*, unsigned int, int)])
  KAPI_COMPAT_HEADERS="$KAPI_COMPAT_HEADERS $bio_end_io_compat_header"

  bio_map_user_compat_header=
  OCFS2_CHECK_KERNEL_INCLUDES([for gfp argument to bio_map_user], linux/bio.h,
    $kernelincludes, , bio_map_user_compat_header="bio_map_user.h",
    [^.*unsigned long, unsigned int, int, gfp_t)])
  KAPI_COMPAT_HEADERS="$KAPI_COMPAT_HEADERS $bio_map_user_compat_header"

  kmem_cache_s_header=
  OCFS2_CHECK_KERNEL_INCLUDES([struct kmem_cache_s], linux/slab.h,
    $kernelincludes, kmem_cache_s_header="kmem_cache_s.h", ,
    [struct kmem_cache_s])
  KAPI_COMPAT_HEADERS="$KAPI_COMPAT_HEADERS $kmem_cache_s_header"

  kmem_cache_create_header=
  OCFS2_CHECK_KERNEL_INCLUDES([kmem_cache_create() with dtor arg in slab.h],
    linux/slab.h, $kernelincludes, kmem_cache_create_header="kmem_cache_create.h", ,
    [^.*void (\*)(void \*, .*kmem_cache.* \*, unsigned long),])
  KAPI_COMPAT_HEADERS="$KAPI_COMPAT_HEADERS $kmem_cache_create_header"

  OCFS2_CHECK_KERNEL_INCLUDES([bd_claim], linux/fs.h, $kernelincludes,
    BD_CLAIM=yes, ,[^.*bd_claim(struct block_device])

  OCFS2_CHECK_KERNEL_INCLUDES([for three argument blkdev_get], linux/fs.h,
    $kernelincludes, BLKDEV_GET_THREE=yes, ,
    [extern int blkdev_get(struct block_device \*\w*, f\?mode_t \w*,])

  OCFS2_CHECK_KERNEL_INCLUDES([for two argument blkdev_put], linux/fs.h,
    $kernelincludes, BLKDEV_PUT_TWO=yes, ,
    [extern int blkdev_put(struct block_device \*\w*,])

  blk_limits_compat_header=
  OCFS2_CHECK_KERNEL_INCLUDES([for old block limits], linux/blkdev.h,
    $kernelincludes, blk_limits_compat_header="blk_limits.h", ,
    [extern void blk_queue_hardsect_size])
  KAPI_COMPAT_HEADERS="$KAPI_COMPAT_HEADERS $blk_limits_compat_header"

  blk_segments_compat_header=
  OCFS2_CHECK_KERNEL_INCLUDES([for old block segments], linux/blkdev.h,
    $kernelincludes, blk_segments_compat_header="blk_segments.h", ,
    [extern void blk_queue_max_hw_segments])
  KAPI_COMPAT_HEADERS="$KAPI_COMPAT_HEADERS $blk_segments_compat_header"

  simple_sync_file_compat_header=
  OCFS2_CHECK_KERNEL_INCLUDES([for simple_sync_file], linux/fs.h,
    $kernelincludes, simple_sync_file_compat_header="simple_sync_file.h", ,
    [extern int simple_sync_file])
  KAPI_COMPAT_HEADERS="$KAPI_COMPAT_HEADERS $simple_sync_file_compat_header"

  slab_ctor_header=
  OCFS2_CHECK_KERNEL_INCLUDES([SLAB_CTOR_VERIFY in slab.h], linux/slab.h,
    $kernelincludes, slab_ctor_header=slab_ctor_verify.h, ,
    [SLAB_CTOR_VERIFY])

  if test "x$slab_ctor_header" = "x"; then
    # We know that a kernel with dtor also has a three-arg ctor
    if test "x$kmem_cache_create_header" != "x"; then
      slab_ctor_header=slab_ctor_three_arg.h
    else
      OCFS2_CHECK_KERNEL_INCLUDES([three argument ctor in slab.h],
        linux/slab.h, $kernelincludes,
        slab_ctor_header=slab_ctor_three_arg.h, ,
        [^.*void (\*)(void \*, .*kmem_cache.* \*, unsigned long))])
    fi
  fi

  if test "x$slab_ctor_header" = "x"; then
    OCFS2_CHECK_KERNEL_INCLUDES([two argument ctor in slab.h], linux/slab.h,
      $kernelincludes, slab_ctor_header=slab_ctor_two_arg.h, ,
      [^.*void (\*)(.*kmem_cache.* \*, void \*))])
  fi

  KAPI_COMPAT_HEADERS="$KAPI_COMPAT_HEADERS $slab_ctor_header"

  current_creds_header=
  OCFS2_CHECK_KERNEL_INCLUDES([current_fs?id() in cred.h], linux/cred.h,
    $kernelincludes, , current_creds_header=current_creds.h,
    [#define current_fsuid(])
  KAPI_COMPAT_HEADERS="$KAPI_COMPAT_HEADERS $current_creds_header"
  TRANS_COMPAT_HEADERS="$TRANS_COMPAT_HEADERS $current_creds_header"

  # using -include has two advantages:
  #  the source doesn't need to know to include compat headers
  #  the compat header file names don't go through the search path
  for h in $KAPI_COMPAT_HEADERS; do
    KAPI_COMPAT_CFLAGS="$KAPI_COMPAT_CFLAGS -include \$(OUR_TOPDIR)/kapi-compat/include/$h"
  done

  for h in $TRANS_COMPAT_HEADERS; do
    TRANS_COMPAT_CFLAGS="$TRANS_COMPAT_CFLAGS -include \$(OUR_TOPDIR)/kapi-compat/include/$h"
  done
fi
AC_SUBST(KAPI_COMPAT_CFLAGS)
AC_SUBST(TRANS_COMPAT_CFLAGS)
AC_SUBST(BACKING_DEV_CAPABILITIES)
AC_SUBST(GET_SB_HAS_VFSMOUNT)
AC_SUBST(MOUNT_BDEV)
AC_SUBST(PSEUDO_DOPS)
AC_SUBST(BD_CLAIM)
AC_SUBST(BLKDEV_GET_THREE)
AC_SUBST(BLKDEV_PUT_TWO)

AC_OUTPUT([Config.make
include/linux/oracleasm/module_version.h
])
