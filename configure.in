AC_INIT(Makefile)

PACKAGE=oracleasm

AC_SUBST(PACKAGE)

#
# Versioning ideas, copied from GTK+
#
# Making releases:
#   MICRO_VERSION += 1;
#   INTERFACE_AGE += 1;
#   BINARY_AGE += 1;
# If any functions have been added, set INTERFACE_AGE to 0.
# If backwards compatibility has been broken, set BINARY_AGE and
# INTEFACE_AGE to 0.
#
MAJOR_VERSION=2
MINOR_VERSION=0
MICRO_VERSION=4
INTERFACE_AGE=4
BINARY_AGE=4
VERSION="${MAJOR_VERSION}.${MINOR_VERSION}.${MICRO_VERSION}"
AC_SUBST(MAJOR_VERSION)
AC_SUBST(MINOR_VERSION)
AC_SUBST(MICRO_VERSION)
AC_SUBST(INTERFACE_AGE)
AC_SUBST(BINARY_AGE)
AC_SUBST(VERSION)

DIST_VERSION=$MAJOR_VERSION.$MINOR_VERSION.$MICRO_VERSION
AC_SUBST(DIST_VERSION)

AC_CANONICAL_HOST

AC_PROG_CC
AC_PROG_CPP

AC_PROG_INSTALL
AC_PROG_LN_S
AC_PROG_RANLIB

AC_PATH_PROG(AR, ar)


AC_HEADER_STDC
AC_C_CONST

AC_CHECK_SIZEOF(unsigned long)

MB_VENDOR()
MB_VENDOR_KERNEL(vendordir)

if test "x$GCC" != "xyes"; then
  AC_MSG_ERROR(GCC is required)
fi

AC_MSG_CHECKING(for directory with kernel build tree)
AC_ARG_WITH(kernel, [  --with-kernel=dir       Path to the kernel build tree [/usr/src/linux]], kerneldir="$withval", [
  if test -n "$vendordir"; then
    kerneldir="$vendordir"
  elif test -d "/lib/modules/`uname -r`/build" -o -L "/lib/modules/`uname -r`/build"; then
    kerneldir="/lib/modules/`uname -r`/build"
  else
    kerneldir="/usr/src/linux"
  fi
])

if test ! -f "${kerneldir}/include/linux/autoconf.h"; then
  AC_MSG_RESULT([not found])
  KERNELDIR=
else
  AC_MSG_RESULT($kerneldir)
  KERNELDIR="$kerneldir"
  AC_SUBST(KERNELDIR)
fi

if test -f "${KERNELDIR}/include/linux/utsrelease.h"; then
  UTS_HEADER=utsrelease.h
else
  UTS_HEADER=version.h
fi

AC_MSG_CHECKING(for kernel version)
if test -n "$KERNELDIR"; then
  kernelinc="${KERNELDIR}/include"

  saved_CPPFLAGS="$CPPFLAGS"
  CPPFLAGS="-I${kernelinc} $CPPFLAGS"
  saved_CFLAGS="$CFLAGS"
  CFLAGS="$CFLAGS $M64"


  rm -f conf.kvertest
  AC_TRY_RUN([
#include <stdio.h>
#include <linux/${UTS_HEADER}>

int
main (void)
{
#ifdef UTS_RELEASE
  FILE *f;
  f = fopen ("conf.kvertest", "w");
  if (!f)
    return 1;
  fprintf (f, "%s", UTS_RELEASE);
  fclose (f);
  return 0;
#else
  return 1;
#endif
}],kversion=`cat conf.kvertest`, kversion="none")
  rm -f conf.kvertest

  CPPFLAGS="$saved_CPPFLAGS"
  CFLAGS="$saved_CFLAGS"
else
  kversion="none"
fi

BUILD_DRIVER=
case "$kversion" in
  2.6.*)
    AC_MSG_RESULT($kversion)
    BUILD_DRIVER=yes
    ;;
  none)
    AC_MSG_RESULT([Could not determine kernel version, disabling driver build])
    ;;
  *)
    AC_MSG_RESULT([This module only supports kernel version 2.6.x, disabling driver build])
  ;;
esac
AC_SUBST(BUILD_DRIVER)

KERNELVER=$kversion
AC_SUBST(KERNELVER)

KAPI_COMPAT_CFLAGS=
BACKING_DEV_CAPABILITIES=
GET_SB_HAS_VFSMOUNT=
if test x"$BUILD_DRIVER" = "xyes"; then
  if test x"$vendordir" = x"$kerneldir" ; then
      kernelincludes="`vendor/${mb_vendor}/kernel.guess include`"
  else
      kernelincludes="$kernelinc"
  fi

  KAPI_COMPAT_HEADERS=

  OCFS2_CHECK_KERNEL_INCLUDES([capabilities mask in backing_dev_info],
    linux/backing-dev.h, $kernelincludes,
    BACKING_DEV_CAPABILITIES=yes, , [\<BDI_CAP_NO_WRITEBACK\>])

  OCFS2_CHECK_KERNEL_INCLUDES([vfsmount in ->get_sb() helpers],
    linux/fs.h, $kernelincludes, GET_SB_HAS_VFSMOUNT=yes, ,
    [^extern int get_sb_pseudo])

  mutex_compat_header=
  OCFS2_CHECK_KERNEL_INCLUDES([for mutex API], linux/fs.h,
    $kernelincludes, , mutex_compat_header="i_mutex.h", [i_mutex])
  KAPI_COMPAT_HEADERS="$KAPI_COMPAT_HEADERS $mutex_compat_header"

  private_compat_header=
  OCFS2_CHECK_KERNEL_INCLUDES([for i_private], linux/fs.h,
    $kernelincludes, , private_compat_header="i_private.h", [i_private])
  KAPI_COMPAT_HEADERS="$KAPI_COMPAT_HEADERS $private_compat_header"

  blksize_compat_header=
  OCFS2_CHECK_KERNEL_INCLUDES([for i_blksize], linux/fs.h,
    $kernelincludes, blksize_compat_header="i_blksize.h", , [i_blksize])
  KAPI_COMPAT_HEADERS="$KAPI_COMPAT_HEADERS $blksize_compat_header"

  # using -include has two advantages:
  #  the source doesn't need to know to include compat headers
  #  the compat header file names don't go through the search path
  for h in $KAPI_COMPAT_HEADERS; do
    KAPI_COMPAT_CFLAGS="$KAPI_COMPAT_CFLAGS -include \$(OUR_TOPDIR)/kapi-compat/include/$h"
  done
fi
AC_SUBST(KAPI_COMPAT_CFLAGS)
AC_SUBST(BACKING_DEV_CAPABILITIES)
AC_SUBST(GET_SB_HAS_VFSMOUNT)


AC_OUTPUT([Config.make
include/linux/oracleasm/module_version.h
vendor/sles9/oracleasm.spec-generic
vendor/rhel4/oracleasm.spec-generic
vendor/sles10/oracleasm.spec-generic
vendor/common/oracleasm-headers.spec-generic
])
