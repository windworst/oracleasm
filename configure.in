AC_INIT(Makefile)

PACKAGE=oracleasm

AC_SUBST(PACKAGE)

#
# Versioning ideas, copied from GTK+
#
# Making releases:
#   MICRO_VERSION += 1;
#   INTERFACE_AGE += 1;
#   BINARY_AGE += 1;
# If any functions have been added, set INTERFACE_AGE to 0.
# If backwards compatibility has been broken, set BINARY_AGE and
# INTEFACE_AGE to 0.
#
MAJOR_VERSION=2
MINOR_VERSION=0
MICRO_VERSION=1
INTERFACE_AGE=1
BINARY_AGE=1
VERSION="${MAJOR_VERSION}.${MINOR_VERSION}.${MICRO_VERSION}"
AC_SUBST(MAJOR_VERSION)
AC_SUBST(MINOR_VERSION)
AC_SUBST(MICRO_VERSION)
AC_SUBST(INTERFACE_AGE)
AC_SUBST(BINARY_AGE)
AC_SUBST(VERSION)

DIST_VERSION=$MAJOR_VERSION.$MINOR_VERSION.$MICRO_VERSION
AC_SUBST(DIST_VERSION)

AC_CANONICAL_HOST

AC_PROG_CC
AC_PROG_CPP

AC_PROG_INSTALL
AC_PROG_LN_S
AC_PROG_RANLIB

AC_PATH_PROG(AR, ar)

AC_CHECK_PROGS(RPMBUILD, rpmbuild rpm)
AC_MSG_CHECKING([absolute rpm file directory])
RPM_TOPDIR="`pwd`"
AC_MSG_RESULT([$RPM_TOPDIR])
AC_SUBST(RPM_TOPDIR)

AC_HEADER_STDC
AC_C_CONST

AC_ARG_ENABLE(force32,
              [  --enable-force32    Force building a 32bit library on a 64bit platform],
              force32="$enableval",
              force32="no")

MCMODEL=""
M64=""
USERM64=""
case "$host_cpu" in
x86_64)
    MCMODEL="-mcmodel=kernel"
    ;;
ppc64|powerpc64|ppc64iseries|ppc64pseries)
    M64="-m64"
    case "$force32" in
    yes|true|on)
        ;;
    *)
        USERM64="$M64"
        ;;
    esac
    ;;
*)
    ;;
esac

AC_SUBST(MCMODEL)
AC_SUBST(M64)
AC_SUBST(USERM64)

AC_MSG_CHECKING(build architectures)
TOOLSARCH=
if test -f /etc/redhat-release
then
    RPMARCH="`rpm -qf /etc/redhat-release --queryformat \"%{ARCH}\"`"
    if test -n "$RPMARCH" -a "$RPMARCH" != "noarch"
    then
        TOOLSARCH="$RPMARCH"
    fi
fi
if test -z "$TOOLSARCH"
then
    case "$host_cpu" in
    x86_64|ia64|s390x)
        TOOLSARCH="$host_cpu"
        ;;
    i386|i686|i586|i486)
        TOOLSARCH="i386"
        ;;
    ppc|ppc64|ppciseries|ppcpseries|ppc64iseries|ppc64pseries|powerpc|powerpc64)
        TOOLSARCH="ppc64"
        ;;
    *)
        AC_MSG_RESULT([not found])
        AC_MSG_ERROR([invalid or unsupported CPU type])
        ;;
    esac
fi
case "$TOOLSARCH" in
x86_64|ia64|ppc64)
    MODULEARCH="$TOOLSARCH"
    ;;
ppc)
    MODULEARCH="$host_cpu"
    ;;
i386)
    if test -r /etc/UnitedLinux-release -o -r /etc/SuSE-release
    then
        MODULEARCH=i586
    else
        MODULEARCH="i686"
    fi
    ;;
*)
    AC_MSG_RESULT([not found])
    AC_MSG_RESULT([invalid or unsupported kernel CPU type])
    ;;
esac
AC_MSG_RESULT([${MODULEARCH}, ${TOOLSARCH}])
AC_SUBST(MODULEARCH)
AC_SUBST(TOOLSARCH)
    

if test "x$GCC" != "xyes"; then
  AC_MSG_ERROR(GCC is required)
fi

AC_MSG_CHECKING(for directory with kernel source)
AC_ARG_WITH(kernel, [  --with-kernel=dir       Path to the kernel source tree [/usr/src/linux]], kerneldir="$withval", [
  if test -d "/lib/modules/`uname -r`/build" -o -L "/lib/modules/`uname -r`/build"; then
    kerneldir="/lib/modules/`uname -r`/build"
  else
    kerneldir="/usr/src/linux"
  fi
])
AC_MSG_RESULT($kerneldir)

KERNELDIR=$kerneldir
AC_SUBST(KERNELDIR)

KERNELINC="$kerneldir/include"

saved_CPPFLAGS="$CPPFLAGS"
CPPFLAGS="-I$KERNELINC $CPPFLAGS"
saved_CFLAGS="$CFLAGS"
CFLAGS="$CFLAGS $M64"

AC_CHECK_SIZEOF(unsigned long)

if test ! -f "$KERNELINC/linux/autoconf.h"; then
  AC_MSG_ERROR(No configured kernel include tree found)
fi

AC_MSG_CHECKING([for kernel module symbol versions])
AC_EGREP_CPP(kernel_has_modversions,
[#include <linux/autoconf.h>
#ifdef CONFIG_MODVERSIONS
  kernel_has_modversions
#endif
}], modversions=yes, modversions=no)
AC_MSG_RESULT($modversions)

MODVERSIONS=
if test "x$modversions" = "xyes"; then
  MODVERSIONS="-include \$(KERNELINC)/linux/modversions.h -DMODVERSIONS"
fi
AC_SUBST(MODVERSIONS)

AC_MSG_CHECKING(for kernel version)
rm -f conf.kvertest
AC_TRY_RUN([
#include <stdio.h>
#include <linux/version.h>

int
main (void)
{
#ifdef UTS_RELEASE
  FILE *f;
  f = fopen ("conf.kvertest", "w");
  if (!f)
    return 1;
  fprintf (f, "%s", UTS_RELEASE);
  fclose (f);
  return 0;
#else
  return 1;
#endif
}],kversion=`cat conf.kvertest`, kversion="none")
rm -f conf.kvertest

BUILD_DRIVER=
case "$kversion" in
  2.6.*)
    AC_MSG_RESULT($kversion)
    BUILD_DRIVER=yes
    ;;
  none)
    AC_MSG_RESULT([Could not determine kernel version, disabling driver build])
    ;;
  *)
    AC_MSG_RESULT([This module only supports kernel version 2.6.x, disabling driver build])
    ;;
esac
AC_SUBST(BUILD_DRIVER)

KERNELVER=$kversion
AC_SUBST(KERNELVER)

AC_MSG_CHECKING(for directory for kernel modules)
AC_ARG_WITH(moddir, [  --with-moddir=/path     Path to where modules should be installed [/lib/modules/<KVER>/fs]], moddir="$withval", moddir="/lib/modules/$kversion/kernel/fs")
AC_MSG_RESULT($moddir)

MODULEDIR=$moddir
AC_SUBST(MODULEDIR)

CPPFLAGS="$saved_CPPFLAGS"
CFLAGS="$saved_CFLAGS"

AC_MSG_CHECKING(for gcc include path)
gccdir="`$CC -print-search-dirs | sed -n 's/^install: \(.*\)/\1/p'`include"
if test -z "$gccdir"; then
  AC_MSG_RESULT(not found)
  AC_MSG_ERROR(Could not determine gcc include path)
else
  AC_MSG_RESULT($gccdir)
fi

GCCINC=$gccdir
AC_SUBST(GCCINC)

AC_MSG_CHECKING(RPM package version)
AC_ARG_WITH(rpmversion, [  --with-rpmversion=version  Version for the RPM package [1]], rpmversion="$withval", rpmversion="1")
AC_MSG_RESULT($rpmversion)

RPM_VERSION=$rpmversion
AC_SUBST(RPM_VERSION)

AC_OUTPUT([Config.make
include/linux/asm_module_version.h
vendor/common/oracleasm-support.spec
vendor/suse/oracleasm-2.6.5.spec-generic
vendor/redhat/oracleasm-2.6.9-EL.spec-generic
])
