# -*-Shell-script-*-
# init functions for oracleasm
#
# Parent caller must have sourced init.d functions
# . /etc/init.d/functions on Red Hat
# . /etc/rc.status on UnitedLinux
#

# Force LC_ALL=C
export LC_ALL=C


#
# dev_create()
#
# Create $1
# Returns 0 on success, 1 on error, 2 if it already exists.
#
dev_create()
{
    if [ "$#" -lt "1" -o -z "$1" ]
    then
        echo "dev_create(): Requires an argument" >&2
        return 1
    fi
    DEV="$1"
    if [ -e "$DEV" ]
    then
        if [ -d "$DEV" ]
        then
            return 2
        fi
        echo "dev_create(): File $DEV is not a directory" >&2
        return 1
    fi

    echo -n "Creating $DEV mount point "
    mkdir "$DEV" 2>/dev/null
    if [ $? != 0 ]
    then
        echo "Unable to create mount point $DEV" >&2
        return 1
    fi
    return 0
}


#
# module_link()
#
# Link $1 from path $2 to $3
# Returns 0 on success, 1 on error, 2 if it already exists.
#
module_link()
{
    if [ "$#" -lt 3 -o -z "$1" -o -z "$2" -o -z "$3" ]
    then
        echo -n "module_link(): Requires 3 arguments" >&2
        return 1
    fi
    MODULENAME="$1"
    SRCPATH="$2"
    TARGETPATH="$3"

    # Assume any symlink is OK - caveat emptor for non-RPM users
    test -L "${TARGETPATH}/${MODULENAME}" && return 2

    echo -n "Linking module ${MODULENAME} into the module path "

    # Same deal for modules that are physically there
    if test -f "${TARGETPATH}/${MODULENAME}" ; then
        EXISTVER="`modinfo "${TARGETPATH}/${MODULENAME}" | awk '/description.*version/{sub(/^.*\(version /, ""); sub(/\)"$/, ""); print;}'`"
        if test -n "${EXISTVER}" ; then
            ABIVER="`modinfo "${SRCPATH}/${MODULENAME}" | awk '/description.*version/{sub(/^.*\(version /, ""); sub(/\)"$/, ""); print;}'`"

            echo
            echo "Leaving existing module in place (ABI module version $ABIVER, existing module version $EXISTVER)"
            return 2
        else
            # The existing module is too old - pre-ABI packaging
            echo
            echo "Warning: Moving ancient ${MODULENAME} out of the way"
            mv -f "${TARGETPATH}/${MODULENAME}" "${TARGETPATH}/${MODULENAME}.preABI" >/dev/null 2>&1
            if test "$?" != 0 ; then
                echo "Unable to move ancient module out of the way" >&2
                return 1
            fi
        fi
    fi

    if test ! -d "$TARGETPATH" ; then
        if test -e "${TARGETPATH}"; then
            echo "Path \"${TARGETPATH}\" already exists, but is not a directory" >&2
            return 1
        else
            mkdir -p "$TARGETPATH" >/dev/null 2>&1
            if test $? != 0; then
                echo "Unable to create directory \"${TARGETPATH}\"" >&2
                return 1
            fi
        fi
    fi

    ln -s "${SRCPATH}/${MODULENAME}" "${TARGETPATH}/${MODULENAME}" >/dev/null 2>&1
    if test $? != 0; then
        echo "Unable to create symbolic link \"${TARGETPATH}/${MODULENAME}\"" >&2
        return 1
    fi
    depmod -a

    return 0
}


#
# load_module()
# Load a module
#
# 0 is success, 1 is error, 2 is already loaded
# 
load_module()
{
    if [ "$#" -lt "1" -o -z "$1" ]
    then
        echo "load_module(): Requires an argument" >&2
        return 1
    fi
    MODNAME="$1"

    MODOUT="`awk '$1 ~ /^'$MODNAME'$/{print $1;exit}' < /proc/modules 2>/dev/null`"
    if [ -n "$MODOUT" ]
    then
        return 2
    fi

    echo -n "Loading module \"$MODNAME\" "
    modprobe -s "$MODNAME"
    if [ "$?" != 0 ]
    then
        echo "Unable to load module \"$MODNAME\"" >&2
        return 1
    fi

    return 0
}

#
# unload_module()
# Unload a module
#
# 0 is success, 1 is error, 2 is not loaded
# 
unload_module()
{
    if [ "$#" -lt "1" -o -z "$1" ]
    then
        echo "unload_module(): Requires an argument" >&2
        return 1
    fi
    MODNAME="$1"

    MODOUT="`awk '$1 ~ /^'$MODNAME'$/{print $1;exit}' < /proc/modules 2>/dev/null`"
    if [ -z "$MODOUT" ]
    then
        return 2
    fi

    echo -n "Unloading module \"$MODNAME\" "
    modprobe -rs "$MODNAME"
    if [ "$?" != 0 ]
    then
        echo "Unable to unload module \"$MODNAME\"" >&2
        return 1
    fi

    return 0
}


#
# mount_device()
# Mount the /dev/oracleasm filesystem
#
# 0 is success, 1 is error, 2 is already mounted
#
mount_device()
{
    if [ -z "$DEVASM" ]
    then
        echo "mount_device(): No device specified!" >&2
        return 1
    fi
    DEVASMSEARCH="`echo "$DEVASM" | sed -e 's/\//\\\\\//g'`"
    MOUNTOUT="`awk '$2 ~ /^'$DEVASMSEARCH'$/{print $2; exit}' < /proc/mounts 2>/dev/null`"

    if [ -n "$MOUNTOUT" ]
    then
        return 2
    fi

    echo -n "Mounting ASMlib driver filesystem "
    OPTS=""
    case "$ORACLEASM_UID" in
    "")
        ;;
    *[^0-9]*)
        echo "UID is invalid: \"$ORACLEASM_UID\"" >&2
        return 1
        ;;
    *)
        OPTS="uid=$ORACLEASM_UID"
        ;;
    esac
    case "$ORACLEASM_GID" in
    "")
        ;;
    *[^0-9]*)
        echo "GID is invalid: \"$ORACLEASM_GID\"" >&2
        return 1
        ;;
    *)
        if [ -n "$OPTS" ]
        then
            OPTS="${OPTS},"
        fi
        OPTS="${OPTS}gid=$ORACLEASM_GID"
        ;;
    esac

    if [ -n "$OPTS" ]
    then
        OPTS="-o ${OPTS}"
    fi

    mount $OPTS -t oracleasmfs oracleasmfs $DEVASM
    if [ $? != 0 ]
    then
        echo "Unable to mount ASMlib driver filesystem" >&2
        return 1
    fi

    return 0
}


#
# unmount_device()
# Unmount the /dev/oracleasm filesystem
#
# 0 is success, 1 is error, 2 is not mounted
#
unmount_device()
{
    if [ -z "$DEVASM" ]
    then
        echo "mount_device(): No device specified!" >&2
        return 1
    fi
    DEVASMSEARCH="`echo "$DEVASM" | sed -e 's/\//\\\\\//g'`"
    MOUNTOUT="`awk '$2 ~ /^'$DEVASMSEARCH'$/{print $2; exit}' < /proc/mounts 2>/dev/null`"

    if [ -z "$MOUNTOUT" ]
    then
        return 2
    fi

    echo -n "Unmounting ASMlib driver filesystem "
    umount $DEVASM
    if [ $? != 0 ]
    then
        echo "Unable to unmount ASMlib driver filesystem" >&2
        return 1
    fi

    return 0
}


#
# write_sysconfig()
#
# Writes the system configuration out
#
write_sysconfig()
{
    echo -n "Writing Oracle ASM library driver configuration "
    cat >/etc/sysconfig/oracleasm <<EOF
#
# This is a configuration file for automatic loading of the Oracle
# Automatic Storage Management library kernel driver.  It is generated
# By running /etc/init.d/oracleasm configure.  Please use that method
# to modify this file
#

# ORACLEASM_ENABELED: 'true' means to load the driver on boot.
ORACLEASM_ENABLED=${ORACLEASM_ENABLED}

# ORACLEASM_UID: Default UID owning the $DEVASM mount point.
ORACLEASM_UID=${ORACLEASM_UID}

# ORACLEASM_GID: Default GID owning the $DEVASM mount point.
ORACLEASM_GID=${ORACLEASM_GID}

EOF

    if [ $? != 0 ]
    then
        return 1
    fi
    return 0
}


configure_ask()
{
    cat <<EOF
Configuring the Oracle ASM library driver.

This will configure the on-boot properties of the Oracle ASM library
driver.  The following questions will determine whether the driver is
loaded on boot and what permissions it will have.  The current values
will be shown in brackets ('[]').  Hitting <ENTER> without typing an
answer will keep that current value.  Ctrl-C will abort.

EOF

    while :
    do
        echo -n "Default UID to own the driver interface [$ORACLEASM_UID]: "
        read LINE
        case "$LINE" in
        "")
            break
            ;;
        *[^0-9]*)
            echo "Invalid UID: $LINE" >&2
            ;;
        *)
            ORACLEASM_UID=$LINE
            break
            ;;
        esac
    done

    while :
    do
        echo -n "Default GID to own the driver interface [$ORACLEASM_GID]: "
        read LINE
        case "$LINE" in
        "")
            break
            ;;
        *[^0-9]*)
            echo "Invalid GID: $LINE" >&2
            ;;
        *)
            ORACLEASM_GID=$LINE
            break
            ;;
        esac
    done

    while :
    do
        if [ "$ORACLEASM_ENABLED" = "true" ]
        then
            CUR=y
        else
            CUR=n
        fi
        echo -n "Start Oracle ASM library driver on boot (y/n) [$CUR]: "
        read LINE
        case "$LINE" in
        "")
            break
            ;;
        y|Y)
            ORACLEASM_ENABLED=true
            break
            ;;
        n|N)
            ORACLEASM_ENABLED=false
            break
            ;;
        *)
            echo "Invalid GID: $LINE" >&2
            ;;
        esac
    done
}

