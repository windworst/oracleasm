# -*-Shell-script-*-
# init functions for oracleasm
#
# Parent caller must have sourced init.d functions
# . /etc/init.d/functions on Red Hat
# . /etc/rc.status on UnitedLinux
#

# Force LC_ALL=C
export LC_ALL=C


#
# dev_create()
#
# Create $1
# Returns 0 on success, 1 on error, 2 if it already exists.
#
dev_create()
{
    if [ "$#" -lt "1" -o -z "$1" ]
    then
        echo "dev_create(): Requires an argument" >&2
        return 1
    fi
    DEV="$1"
    if [ -e "$DEV" ]
    then
        if [ -d "$DEV" ]
        then
            return 2
        fi
        echo "dev_create(): File $DEV is not a directory" >&2
        return 1
    fi

    echo -n "Creating $DEV mount point "
    mkdir "$DEV" 2>/dev/null
    if [ $? != 0 ]
    then
        echo "Unable to create mount point $DEV" >&2
        return 1
    fi
    return 0
}


#
# module_link()
#
# Link $1 from path $2 to $3
# Returns 0 on success, 1 on error, 2 if it already exists.
#
module_link()
{
    if [ "$#" -lt 3 -o -z "$1" -o -z "$2" -o -z "$3" ]
    then
        echo -n "module_link(): Requires 3 arguments" >&2
        return 1
    fi
    MODULENAME="$1"
    SRCPATH="$2"
    TARGETPATH="$3"

    # Assume any symlink is OK - caveat emptor for non-RPM users
    test -L "${TARGETPATH}/${MODULENAME}" && return 2

    echo -n "Linking module ${MODULENAME} into the module path "

    # Same deal for modules that are physically there
    if test -f "${TARGETPATH}/${MODULENAME}" ; then
        EXISTVER="`modinfo "${TARGETPATH}/${MODULENAME}" | awk '/description.*version/{sub(/^.*\(version /, ""); sub(/\)"$/, ""); print;}'`"
        if test -n "${EXISTVER}" ; then
            ABIVER="`modinfo "${SRCPATH}/${MODULENAME}" | awk '/description.*version/{sub(/^.*\(version /, ""); sub(/\)"$/, ""); print;}'`"

            echo
            echo "Leaving existing module in place (ABI module version $ABIVER, existing module version $EXISTVER)"
            return 2
        else
            # The existing module is too old - pre-ABI packaging
            echo
            echo "Warning: Moving ancient ${MODULENAME} out of the way"
            mv -f "${TARGETPATH}/${MODULENAME}" "${TARGETPATH}/${MODULENAME}.preABI" >/dev/null 2>&1
            if test "$?" != 0 ; then
                echo "Unable to move ancient module out of the way" >&2
                return 1
            fi
        fi
    fi

    if test ! -d "$TARGETPATH" ; then
        if test -e "${TARGETPATH}"; then
            echo "Path \"${TARGETPATH}\" already exists, but is not a directory" >&2
            return 1
        else
            mkdir -p "$TARGETPATH" >/dev/null 2>&1
            if test $? != 0; then
                echo "Unable to create directory \"${TARGETPATH}\"" >&2
                return 1
            fi
        fi
    fi

    ln -s "${SRCPATH}/${MODULENAME}" "${TARGETPATH}/${MODULENAME}" >/dev/null 2>&1
    if test $? != 0; then
        echo "Unable to create symbolic link \"${TARGETPATH}/${MODULENAME}\"" >&2
        return 1
    fi
    depmod -a

    return 0
}


#
# load_module()
# Load a module
#
# 0 is success, 1 is error, 2 is already loaded
# 
load_module()
{
    if [ "$#" -lt "1" -o -z "$1" ]
    then
        echo "load_module(): Requires an argument" >&2
        return 1
    fi
    MODNAME="$1"

    MODOUT="`awk '$1 ~ /^'$MODNAME'$/{print $1;exit}' < /proc/modules 2>/dev/null`"
    if [ -n "$MODOUT" ]
    then
        return 2
    fi

    echo -n "Loading module \"$MODNAME\" "
    modprobe -s "$MODNAME"
    if [ "$?" != 0 ]
    then
        echo "Unable to load module \"$MODNAME\"" >&2
        return 1
    fi

    return 0
}

#
# unload_module()
# Unload a module
#
# 0 is success, 1 is error, 2 is not loaded
# 
unload_module()
{
    if [ "$#" -lt "1" -o -z "$1" ]
    then
        echo "unload_module(): Requires an argument" >&2
        return 1
    fi
    MODNAME="$1"

    MODOUT="`awk '$1 ~ /^'$MODNAME'$/{print $1;exit}' < /proc/modules 2>/dev/null`"
    if [ -z "$MODOUT" ]
    then
        return 2
    fi

    echo -n "Unloading module \"$MODNAME\" "
    modprobe -rs "$MODNAME"
    if [ "$?" != 0 ]
    then
        echo "Unable to unload module \"$MODNAME\"" >&2
        return 1
    fi

    return 0
}
