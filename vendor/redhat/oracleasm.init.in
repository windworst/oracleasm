#! /bin/sh
# init fragment for oracleasm
#
# chkconfig: 2345 26 20
# description: ASM ABI link fixup.

#
# Note that the start priority is 26.  This is the same as raw devices.
# It seemed appropriate.
#
#


# Force LC_ALL=C
export LC_ALL=C
 
prefix=@prefix@
exec_prefix=@exec_prefix@
libdir=@libdir@

# Source init.d functions
. /etc/init.d/functions

# Source common functions
. ${libdir}/oracleasm/oracleasm.init.functions

# Source configuration
[ -f /etc/sysconfig/oracleasm ] && . /etc/sysconfig/oracleasm


KVER="`uname -r`"
case "$KVER" in
2.4.9-e.*)
    BASE_VER=2.4.9-e
    BASE_STR=2.4.9-e
    ;;
2.4.18-e.*)
    echo -n "Checking for Red Hat enterprise kernel: "
    failure $"Red Hat Advanced Server 2.1 for IA-64 is not suppported;"
    echo
    exit 1
    ;;
2.4.21-*.EL*)
    BASE_VER=2.4.21-
    BASE_STR=2.4.21-EL
    ;;
*)
    echo -n "Checking for Red Hat enterprise kernel: "
    failure $"Kernel ${KVER} is not a Red Hat enterprise release;"
    echo
    exit 1
    ;;
esac
    
check_ver()
{
    VERNUM="$1"
    case "$VERNUM" in
    [0-9])
        ;;
    [1-9][0-9])
        ;;
    [1-9][0-9][0-9])
        ;;
    *)
        echo -n "Checking for Red Hat enterprise kernel: "
        failure $"Kernel ${KVER} is not a Red Hat enterprise release;"
        echo
        exit 1
        ;;
    esac
}

EVER="${KVER#${BASE_VER}}"
ETYPE=""
case "$EVER" in
*hugemem)
    ETYPE=hugemem
    ;;
*smp)
    ETYPE=smp
    ;;
*enterprise)
    if test "$BASE_VER" = "2.4.9-e"
    then
        ETYPE=enterprise
    fi
    ;;
*summit)
    if test "$BASE_VER" = "2.4.9-e"
    then
        ETYPE=summit
    fi
    ;;
*[0-9])
    ETYPE=up
    ;;
*[0-9].EL)
    # UP on RHEL 3
    ETYPE=up
    ;;
*[0-9].ELorafw*)
    # UP on RHEL 3 orafw
    check_ver "${EVER#*orafw}"
    ETYPE=up
    ;;
esac

if test -z "$ETYPE"
then
    echo -n "Checking for Red Hat enterprise kernel: "
    failure $"Kernel ${KVER} is not a Red Hat enerprise release;"
    echo
    exit 1
fi

case "$EVER" in
*.EL)
    EVER="${EVER%.EL}"
    ;;
*)
    ;;
esac

if test "$ETYPE" = "up"
then
    ETYPE=""
fi
case "$BASE_STR" in
2.4.21-EL)
    case "$EVER" in
    *ELorafw*)
        EVER="${EVER%${ETYPE}}"
        check_ver "${EVER#*orafw}"
        EVER="${EVER%.ELorafw*}"
        ;;
    *)
        EVER="${EVER%.EL${ETYPE}}"
       ;;
    esac
    ;;
*)
    EVER="${EVER%${ETYPE}}"
    ;;
esac

EMAJOR=0
EMINOR=0
EMICRO=0
EVER="${EVER#.}"
EMAJOR="${EVER%%.*}"
check_ver $EMAJOR
ETMP="${EVER#${EMAJOR}}"
ETMP="${ETMP#.}"
if test -n "$ETMP"
then
    EMINOR="${ETMP%%.*}"
    check_ver $EMINOR
    ETMP="${ETMP#${EMINOR}}"
    ETMP="${ETMP#.}"
fi
if test -n "$ETMP"
then
    EMICRO="${ETMP%%.*}"
    check_ver $EMICRO
    ETMP="${ETMP#${EMICRO}}"
    ETMP="${ETMP#.}"
fi
if test -n "$ETMP"
then
    echo -n "Checking for Red Hat enterprise kernel: "
    failure $"Kernel ${KVER} is not a Red Hat enterprise release;"
    echo
    exit 1
fi

# This is for path happiness...
if test "$ETYPE" != ""
then
    ETYPE="${ETYPE}-"
fi
MODPATH="/lib/modules/${KVER}/kernel/drivers/addon/oracleasm"
OBJPATH="/lib/modules/${BASE_STR}-${ETYPE}ABI/oracleasm"
MODNAME="oracleasm"
if [ -z "${ORACLE_ASMMANAGER}" ]
then
    ORACLE_ASMMANAGER="/dev/oracleasm"
fi



if_fail()
{
    RC="$1"
    if [ "$RC" = "0" ]
    then
        success
        echo
        return
    elif [ "$RC" = "2" ]
    then
        return
    fi
    failure $"$2;"
    echo
    exit 1
}


link()
{
    module_link "${MODNAME}.o" "${OBJPATH}" "${MODPATH}"
    if_fail "$?" "Unable to link the ASMlib driver module"
}


configure()
{
    configure_ask
    write_sysconfig
    if_fail $? "Unable to write the driver configuration"
}


scandisks()
{
    scan_disks
    if_fail "$?" "Unable to scan for ASM disks"
}


start()
{
    link

    dev_create "${ORACLE_ASMMANAGER}"
    if_fail "$?" "Unable to create ${ORACLE_ASMMANAGER}"

    if [ "$ORACLEASM_ENABLED" != "true" -o ! -r "${OBJPATH}/${MODNAME}.o" ]
    then
        exit 0
    fi

    load_module "${MODNAME}"
    if_fail "$?" "Unable to load the ASMlib driver module"

    mount_device
    if_fail "$?" "Unable to mount the ASMlib driver filesystem"

    scandisks
}


stop()
{
    unmount_device
    if_fail "$?" "Unable to unmount the ASMlib driver filesystem"

    unload_module oracleasm
    if_fail "$?" "Unable to unload the ASM library driver"
}



case "$1" in
    start)
        start
	;;
	
    link)
        link
        ;;

    status)
        echo -n $"Checking if ASM is loaded: "
	if grep '^oracleasm ' /proc/modules >/dev/null 2>&1
        then
            success $"ASM is already loaded; status"
            echo
            echo -n $"Checking if $ORACLE_ASMMANAGER is mounted: "
            ORACLE_ASMMANAGERSEARCH="`echo $ORACLE_ASMMANAGER | sed -e 's/\//\\\\\//g'`"
            if grep "^oracleasmfs $ORACLE_ASMMANAGERSEARCH oracleasmfs" /proc/mounts >/dev/null 3>&1
            then
                success $"$ORACLE_ASMMANAGER is already mounted; status"
                echo
                exit 0
            else
                failure $"$ORACLE_ASMMANAGER is not mounted; status"
                echo
                exit 1
            fi
        else
            failure $"ASM is not loaded; status"
            echo
            exit 1
        fi
        ;;

    configure)
        configure
        if [ "$ORACLEASM_ENABLED" = "true" ]
        then
            start
        else
            stop
        fi
        ;;

    enable)
        ORACLEASM_ENABLED=true
        write_sysconfig
        if_fail $? "Unable to write the driver configuration"
        start
        ;;

    disable)
        ORACLEASM_ENABLED=false
        write_sysconfig
        if_fail $? "Unable to write the driver configuration"
        stop
        ;;

    createdisk)
        if [ -z "$2" -o -z "$3" ]
        then
            echo "Action \"createdisk\" requires two arguments" >&2
            exit 1
        fi
        UPDISK="`upper_disk "$2"`"
        make_disk "$UPDISK" "$3"
        if [ $? = 1 ]
        then
            if_fail 1 "Unable to create disk \"$UPDISK\""
        fi
        perm_disk "${ORACLE_ASMMANAGER}/disks/$UPDISK"
        if_fail $? "Unable to change ownership of disk \"$UPDISK\""
        ;;

    deletedisk)
        if [ -z "$2" ]
        then
            echo "Action \"deletedisk\" requires an argument" >&2
            exit 1
        fi
        UPDISK="`upper_disk "$2"`"
        remove_disk "$UPDISK"
        if_fail $? "Unable to delete disk \"$UPDISK\""
        ;;

    renamedisk)
        if [ -z "$2" -o -z "$3" ]
        then
            echo "Action \"renamedisk\" requires two arguments" >&2
            exit 1
        fi
        OLDDISK="`upper_disk "$2"`"
        NEWDISK="`upper_disk "$3"`"
        relabel_disk "$OLDDISK" "$NEWDISK"
        # We know this will error via asmtool
        if_fail 1 "Unable to rename disk \"$OLDDISK\"" >&2
        ;;
    
    force-renamedisk)
        if [ -z "$2" -o -z "$3" ]
        then
            echo "Action \"renamedisk\" requires two arguments" >&2
            exit 1
        fi
        OLDDISK="`upper_disk "$2"`"
        NEWDISK="`upper_disk "$3"`"
        relabel_disk "$OLDDISK" "$NEWDISK" "-a force=yes"
        if [ $? = 1 ]
        then
            if_fail 1 "Unable to rename disk \"$OLDDISK\"" >&2
        fi
        perm_disk "${ORACLE_ASMMANAGER}/disks/$NEWDISK"
        if_fail $? "Unable to change ownership of disk \"$NEWDISK\""
        ;;

    listdisks)
        ls -1 "${ORACLE_ASMMANAGER}/disks/"
        ;;

    querydisk)
        if [ -z "$2" ]
        then
            echo "Action \"querydisk\" requires an argument" >&2
            exit 1
        fi
        UPDISK="`upper_disk "$2"`"
        check_disk "$UPDISK"
        ;;

    scandisks)
        scandisks
        ;;

    stop)
        stop
        ;;

    restart)
        stop
        start
	;;

    *)
	echo "Usage: $0 {start|stop|restart|link|enable|disable|configure|createdisk|deletedisk|querydisk|listdisks|scandisks|status}"
        exit 1
esac

exit 0

