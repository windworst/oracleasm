#! /bin/sh
# init fragment for osm
#
# chkconfig: 2345 26 20
# description: OSM ABI link fixup.

#
# Note that the start priority is 26.  This is the same as raw devices.
# It seemed appropriate.
#
#

# Source init.d functions
. /etc/init.d/functions

KVER="`uname -r`"
case "$KVER" in
2.4.9-e.*)
    BASE_VER=2.4.9-e
    ;;
2.4.18-e.*)
    echo -n "Checking for Red Hat enterprise kernel: "
    failure $"Red Hat Advanced Server 2.1 for IA-64 is not suppported;"
    echo
    exit 1
    ;;
2.4.21-ent.*)
    BASE_VER=2.4.21-ent
    ;;
*)
    echo -n "Checking for Red Hat enterprise kernel: "
    failure $"Kernel ${KVER} is not a Red Hat enterprise release;"
    echo
    exit 1
    ;;
esac
    
EVER="${KVER#${BASE_VER}}"
ETYPE=""
case "$EVER" in
*hugemem)
    ETYPE=hugemem
    ;;
*smp)
    ETYPE=smp
    ;;
*enterprise)
    if test "$BASE_VER" = "2.4.9-e"
    then
        ETYPE=enterprise
    fi
    ;;
*summit)
    if test "$BASE_VER" = "2.4.9-e"
    then
        ETYPE=summit
    fi
    ;;
*[0-9])
    ETYPE=up
    ;;
esac

if test -z "$ETYPE"
then
    echo -n "Checking for Red Hat enterprise kernel: "
    failure $"Kernel ${KVER} is not a Red Hat enerprise release;"
    echo
    exit 1
fi

EVER="${EVER%${ETYPE}}"
EVER="${EVER#.}"
case "$EVER" in
[1-9])
    ;;
[1-9][0-9])
    ;;
[1-9][0-9][0-9])
    ;;
*)
    echo -n "Checking for Red Hat enterprise kernel: "
    failure $"Kernel ${KVER} is not a Red Hat enterprise release;"
    echo
    exit 1
    ;;
esac

# This is for path happiness...
if test "$ETYPE" != "up"
then
    ETYPE="${ETYPE}-"
fi
MODPATH="/lib/modules/${KVER}/kernel/drivers/addon/osm"
OBJPATH="/lib/modules/${BASE_VER}-${ETYPE}ABI/osm"

test -r "$OBJPATH/osm.o" || exit 0


module_link()
{
    # Assume any symlink is OK - caveat emptor for non-RPM users
    test -L "${MODPATH}/osm.o" && return

    echo -n "Linking OSM module into the module path "

    # Same deal for modules that are physically there
    if test -f "${MODPATH}/osm.o" ; then
        EXISTVER="`modinfo "${MODPATH}/osm.o" | awk '/description.*version/{sub(/^.*\(version /, ""); sub(/\)"$/, ""); print;}'`"
        if test -n "${EXISTVER}" ; then
            ABIVER="`modinfo "${OBJPATH}/osm.o" | awk '/description.*version/{sub(/^.*\(version /, ""); sub(/\)"$/, ""); print;}'`"

            echo
            echo "Leaving existing osm module in place (ABI module version $ABIVER, existing module version $EXISTVER)"
            success
            echo
            return
        else
            # The existing module is too old - pre-ABI packaging
            echo
            echo "Warning: Moving ancient osm.o out of the way"
            mv -f "${MODPATH}/osm.o" "${MODPATH}/osm.o.preABI" >/dev/null 2>&1
            if test "$?" != 0 ; then
                failure $"Unable to move ancient osm module out of the way"
                echo
                exit 1
            fi
        fi
    fi

    if test ! -d "$MODPATH" ; then
        if test -e "${MODPATH}"; then
            failure $"Path \"${MODPATH}\" already exists, but is not a directory"
            echo
            exit 1
        else
            mkdir -p "$MODPATH" >/dev/null 2>&1
            if test $? != 0; then
                failure $"Unable to create directory \"${MODPATH}\""
                echo
                exit 1
            fi
        fi
    fi

    ln -s "${OBJPATH}/osm.o" "${MODPATH}/osm.o" >/dev/null 2>&1
    if test $? != 0; then
        failure $"Unable to create symbolic link \"${MODPATH}/osm.o\""
        echo
        exit 1
    fi

    success
    echo
}

case "$1" in
    start)
        module_link
        # Should it load and mount?
        RETVAL=0
	;;
	
    link)
	module_link
        RETVAL=0
        ;;

    status)
        echo -n $"Checking if OSM is loaded: "
	if grep '^osm ' /proc/modules >/dev/null 2>&1
        then
            success $"OSM is already loaded; status"
            echo
            echo -n $"Checking if /dev/osm is mounted: "
            if grep '^none /dev/osm osmfs' /proc/mounts >/dev/null 2>&1
            then
                success $"/dev/osm is already mounted; status"
                echo
                exit 0
            else
                failure $"/dev/osm is not mounted; status"
                echo
                exit 1
            fi
        else
            failure $"OSM is not loaded; status"
            echo
            exit 1
        fi
        ;;

    stop|restart)
        RETVAL=0
	;;

    *)
	echo "Usage: $0 {start|stop|restart|link|status}"
        RETVAL=1
esac

exit $RETVAL
